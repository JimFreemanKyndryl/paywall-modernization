-- ================================================================
-- PAYWALL SYSTEM DATABASE SCHEMA
-- DB2 for z/OS
-- ================================================================

-- Drop existing objects (for clean installation)
-- DROP TABLE ACTIVATION_KEYS;
-- DROP TABLE PAYMENT_TRANSACTIONS;
-- DROP TABLE PAYMENT_METHODS;
-- DROP TABLE SUBSCRIPTION_HISTORY;
-- DROP TABLE SUBSCRIPTIONS;
-- DROP TABLE CUSTOMERS;
-- DROP TABLE PLAN_DEFINITIONS;
-- DROP SEQUENCE CUSTOMER_SEQ;
-- DROP SEQUENCE SUBSCRIPTION_SEQ;
-- DROP SEQUENCE PAYMENT_SEQ;
-- DROP SEQUENCE TRANSACTION_SEQ;

-- ================================================================
-- SEQUENCES
-- ================================================================

CREATE SEQUENCE CUSTOMER_SEQ
    START WITH 1000000
    INCREMENT BY 1
    NO MAXVALUE
    NO CYCLE
    CACHE 20;

CREATE SEQUENCE SUBSCRIPTION_SEQ
    START WITH 2000000
    INCREMENT BY 1
    NO MAXVALUE
    NO CYCLE
    CACHE 20;

CREATE SEQUENCE PAYMENT_SEQ
    START WITH 3000000
    INCREMENT BY 1
    NO MAXVALUE
    NO CYCLE
    CACHE 20;

CREATE SEQUENCE TRANSACTION_SEQ
    START WITH 4000000
    INCREMENT BY 1
    NO MAXVALUE
    NO CYCLE
    CACHE 20;

-- ================================================================
-- TABLES
-- ================================================================

-- Plan definitions table
CREATE TABLE PLAN_DEFINITIONS (
    PLAN_CODE        CHAR(3) NOT NULL,
    PLAN_NAME        VARCHAR(50) NOT NULL,
    DESCRIPTION      VARCHAR(200),
    MONTHLY_PRICE    DECIMAL(9,2) NOT NULL,
    ANNUAL_PRICE     DECIMAL(9,2),
    MAX_USERS        INTEGER DEFAULT 1,
    FEATURES         VARCHAR(500),
    STATUS           CHAR(1) NOT NULL DEFAULT 'A',
    CREATED_DATE     TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
    MODIFIED_DATE    TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
    CONSTRAINT PK_PLAN_DEFINITIONS PRIMARY KEY (PLAN_CODE),
    CONSTRAINT CK_PLAN_STATUS CHECK (STATUS IN ('A', 'I', 'D'))
) IN DATABASE.TABLESPACE;

-- Customers table
CREATE TABLE CUSTOMERS (
    CUSTOMER_ID      INTEGER NOT NULL,
    EMAIL            VARCHAR(50) NOT NULL,
    PASSWORD_HASH    CHAR(64) NOT NULL,
    SALT             CHAR(16) NOT NULL,
    FIRST_NAME       VARCHAR(30) NOT NULL,
    LAST_NAME        VARCHAR(30) NOT NULL,
    PHONE            VARCHAR(15),
    ADDRESS_LINE1    VARCHAR(100),
    ADDRESS_LINE2    VARCHAR(100),
    CITY             VARCHAR(50),
    STATE_PROVINCE   VARCHAR(50),
    POSTAL_CODE      VARCHAR(10),
    COUNTRY_CODE     CHAR(2) DEFAULT 'US',
    STATUS           CHAR(1) NOT NULL DEFAULT 'A',
    EMAIL_VERIFIED   CHAR(1) DEFAULT 'N',
    CREATED_DATE     TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
    LAST_LOGIN       TIMESTAMP,
    FAILED_LOGINS    SMALLINT DEFAULT 0,
    LOCKED_UNTIL     TIMESTAMP,
    MODIFIED_DATE    TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
    CONSTRAINT PK_CUSTOMERS PRIMARY KEY (CUSTOMER_ID),
    CONSTRAINT UK_CUSTOMERS_EMAIL UNIQUE (EMAIL),
    CONSTRAINT CK_CUST_STATUS CHECK (STATUS IN ('A', 'I', 'S', 'D')),
    CONSTRAINT CK_EMAIL_VERIFIED CHECK (EMAIL_VERIFIED IN ('Y', 'N'))
) IN DATABASE.TABLESPACE;

CREATE INDEX IX_CUSTOMERS_EMAIL ON CUSTOMERS (EMAIL);
CREATE INDEX IX_CUSTOMERS_STATUS ON CUSTOMERS (STATUS);

-- Subscriptions table
CREATE TABLE SUBSCRIPTIONS (
    SUBSCRIPTION_ID  INTEGER NOT NULL,
    CUSTOMER_ID      INTEGER NOT NULL,
    PLAN_CODE        CHAR(3) NOT NULL,
    START_DATE       DATE NOT NULL,
    END_DATE         DATE NOT NULL,
    RENEWAL_DATE     DATE,
    AUTO_RENEW       CHAR(1) DEFAULT 'Y',
    PAYMENT_METHOD   CHAR(2) NOT NULL,
    TRIAL_END_DATE   DATE,
    STATUS           CHAR(1) NOT NULL DEFAULT 'A',
    CANCEL_DATE      DATE,
    CANCEL_REASON    VARCHAR(100),
    CREATED_DATE     TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
    MODIFIED_DATE    TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
    CONSTRAINT PK_SUBSCRIPTIONS PRIMARY KEY (SUBSCRIPTION_ID),
    CONSTRAINT FK_SUB_CUSTOMER FOREIGN KEY (CUSTOMER_ID) 
        REFERENCES CUSTOMERS (CUSTOMER_ID) ON DELETE RESTRICT,
    CONSTRAINT FK_SUB_PLAN FOREIGN KEY (PLAN_CODE)
        REFERENCES PLAN_DEFINITIONS (PLAN_CODE) ON DELETE RESTRICT,
    CONSTRAINT CK_SUB_STATUS CHECK (STATUS IN ('A', 'C', 'E', 'S', 'T')),
    CONSTRAINT CK_AUTO_RENEW CHECK (AUTO_RENEW IN ('Y', 'N')),
    CONSTRAINT CK_PAYMENT_METHOD CHECK (PAYMENT_METHOD IN ('CC', 'PP', 'BT', 'IN'))
) IN DATABASE.TABLESPACE;

CREATE INDEX IX_SUB_CUSTOMER ON SUBSCRIPTIONS (CUSTOMER_ID);
CREATE INDEX IX_SUB_STATUS ON SUBSCRIPTIONS (STATUS);
CREATE INDEX IX_SUB_END_DATE ON SUBSCRIPTIONS (END_DATE);

-- Subscription history table (for tracking changes)
CREATE TABLE SUBSCRIPTION_HISTORY (
    HISTORY_ID       INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY,
    SUBSCRIPTION_ID  INTEGER NOT NULL,
    CUSTOMER_ID      INTEGER NOT NULL,
    PLAN_CODE        CHAR(3) NOT NULL,
    ACTION           VARCHAR(20) NOT NULL,
    OLD_VALUE        VARCHAR(100),
    NEW_VALUE        VARCHAR(100),
    CHANGE_DATE      TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
    CHANGED_BY       VARCHAR(30) NOT NULL,
    CONSTRAINT PK_SUB_HISTORY PRIMARY KEY (HISTORY_ID),
    CONSTRAINT FK_SUBHIST_SUB FOREIGN KEY (SUBSCRIPTION_ID)
        REFERENCES SUBSCRIPTIONS (SUBSCRIPTION_ID) ON DELETE CASCADE
) IN DATABASE.TABLESPACE;

CREATE INDEX IX_SUBHIST_SUB ON SUBSCRIPTION_HISTORY (SUBSCRIPTION_ID);
CREATE INDEX IX_SUBHIST_DATE ON SUBSCRIPTION_HISTORY (CHANGE_DATE);

-- Payment methods table
CREATE TABLE PAYMENT_METHODS (
    PAYMENT_ID       INTEGER NOT NULL,
    CUSTOMER_ID      INTEGER NOT NULL,
    PAYMENT_METHOD   CHAR(2) NOT NULL,
    PAYMENT_TOKEN    VARCHAR(64),
    LAST_FOUR        CHAR(4),
    EXPIRY_DATE      CHAR(4),
    CARD_TYPE        VARCHAR(20),
    BILLING_NAME     VARCHAR(60),
    BILLING_ADDRESS  VARCHAR(100),
    BILLING_CITY     VARCHAR(50),
    BILLING_STATE    VARCHAR(50),
    BILLING_ZIP      VARCHAR(10),
    BILLING_COUNTRY  CHAR(2) DEFAULT 'US',
    IS_DEFAULT       CHAR(1) DEFAULT 'N',
    STATUS           CHAR(1) NOT NULL DEFAULT 'A',
    CREATED_DATE     TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
    MODIFIED_DATE    TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
    CONSTRAINT PK_PAYMENT_METHODS PRIMARY KEY (PAYMENT_ID),
    CONSTRAINT FK_PAY_CUSTOMER FOREIGN KEY (CUSTOMER_ID)
        REFERENCES CUSTOMERS (CUSTOMER_ID) ON DELETE CASCADE,
    CONSTRAINT CK_PAY_METHOD CHECK (PAYMENT_METHOD IN ('CC', 'PP', 'BT', 'IN')),
    CONSTRAINT CK_PAY_STATUS CHECK (STATUS IN ('A', 'I', 'E')),
    CONSTRAINT CK_IS_DEFAULT CHECK (IS_DEFAULT IN ('Y', 'N'))
) IN DATABASE.TABLESPACE;

CREATE INDEX IX_PAY_CUSTOMER ON PAYMENT_METHODS (CUSTOMER_ID);
CREATE INDEX IX_PAY_STATUS ON PAYMENT_METHODS (STATUS);

-- Payment transactions table
CREATE TABLE PAYMENT_TRANSACTIONS (
    TRANSACTION_ID   INTEGER NOT NULL,
    SUBSCRIPTION_ID  INTEGER NOT NULL,
    PAYMENT_ID       INTEGER NOT NULL,
    AMOUNT           DECIMAL(9,2) NOT NULL,
    CURRENCY         CHAR(3) DEFAULT 'USD',
    TRANSACTION_TYPE VARCHAR(20) NOT NULL,
    GATEWAY_REF      VARCHAR(50),
    GATEWAY_RESPONSE VARCHAR(200),
    STATUS           CHAR(1) NOT NULL,
    ATTEMPT_COUNT    SMALLINT DEFAULT 1,
    PROCESSED_DATE   TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
    NEXT_RETRY       TIMESTAMP,
    CONSTRAINT PK_TRANSACTIONS PRIMARY KEY (TRANSACTION_ID),
    CONSTRAINT FK_TRANS_SUB FOREIGN KEY (SUBSCRIPTION_ID)
        REFERENCES SUBSCRIPTIONS (SUBSCRIPTION_ID) ON DELETE RESTRICT,
    CONSTRAINT FK_TRANS_PAY FOREIGN KEY (PAYMENT_ID)
        REFERENCES PAYMENT_METHODS (PAYMENT_ID) ON DELETE RESTRICT,
    CONSTRAINT CK_TRANS_STATUS CHECK (STATUS IN ('S', 'F', 'P', 'R', 'C')),
    CONSTRAINT CK_TRANS_TYPE CHECK (TRANSACTION_TYPE IN 
        ('INITIAL', 'RENEWAL', 'REFUND', 'CHARGEBACK', 'ADJUSTMENT'))
) IN DATABASE.TABLESPACE;

CREATE INDEX IX_TRANS_SUB ON PAYMENT_TRANSACTIONS (SUBSCRIPTION_ID);
CREATE INDEX IX_TRANS_STATUS ON PAYMENT_TRANSACTIONS (STATUS);
CREATE INDEX IX_TRANS_DATE ON PAYMENT_TRANSACTIONS (PROCESSED_DATE);

-- Activation keys table
CREATE TABLE ACTIVATION_KEYS (
    ACTIVATION_KEY   CHAR(32) NOT NULL,
    CUSTOMER_ID      INTEGER NOT NULL,
    CREATED_DATE     TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
    USED_DATE        TIMESTAMP,
    USED             CHAR(1) DEFAULT 'N',
    EXPIRES_DATE     TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP + 7 DAYS,
    CONSTRAINT PK_ACTIVATION PRIMARY KEY (ACTIVATION_KEY),
    CONSTRAINT FK_ACT_CUSTOMER FOREIGN KEY (CUSTOMER_ID)
        REFERENCES CUSTOMERS (CUSTOMER_ID) ON DELETE CASCADE,
    CONSTRAINT CK_ACT_USED CHECK (USED IN ('Y', 'N'))
) IN DATABASE.TABLESPACE;

CREATE INDEX IX_ACT_CUSTOMER ON ACTIVATION_KEYS (CUSTOMER_ID);
CREATE INDEX IX_ACT_EXPIRES ON ACTIVATION_KEYS (EXPIRES_DATE);

-- ================================================================
-- INITIAL DATA LOAD
-- ================================================================

-- Insert plan definitions
INSERT INTO PLAN_DEFINITIONS 
    (PLAN_CODE, PLAN_NAME, DESCRIPTION, MONTHLY_PRICE, ANNUAL_PRICE, MAX_USERS, FEATURES)
VALUES
    ('BAS', 'Basic', 'Essential features for individuals', 9.99, 99.99, 1, 
     'Access to basic content,Email support,Mobile app access'),
    ('PRE', 'Premium', 'Advanced features for professionals', 19.99, 199.99, 5,
     'All Basic features,Priority support,Advanced analytics,API access'),
    ('ENT', 'Enterprise', 'Complete solution for organizations', 49.99, 499.99, 999,
     'All Premium features,Dedicated support,Custom integrations,SLA guarantee');

-- ================================================================
-- STORED PROCEDURES
-- ================================================================

-- Procedure to clean up expired activation keys
CREATE PROCEDURE CLEANUP_ACTIVATION_KEYS()
LANGUAGE SQL
BEGIN
    DELETE FROM ACTIVATION_KEYS
    WHERE EXPIRES_DATE < CURRENT TIMESTAMP
    AND USED = 'N';
END;

-- Procedure to lock account after failed login attempts
CREATE PROCEDURE LOCK_CUSTOMER_ACCOUNT(IN P_CUSTOMER_ID INTEGER)
LANGUAGE SQL
BEGIN
    UPDATE CUSTOMERS
    SET STATUS = 'S',
        LOCKED_UNTIL = CURRENT TIMESTAMP + 30 MINUTES,
        MODIFIED_DATE = CURRENT TIMESTAMP
    WHERE CUSTOMER_ID = P_CUSTOMER_ID;
END;

-- ================================================================
-- TRIGGERS
-- ================================================================

-- Trigger to update modified_date on customer changes
CREATE TRIGGER TRG_CUSTOMERS_UPDATE
AFTER UPDATE ON CUSTOMERS
REFERENCING NEW AS N OLD AS O
FOR EACH ROW
MODE DB2SQL
BEGIN ATOMIC
    SET N.MODIFIED_DATE = CURRENT TIMESTAMP;
END;

-- Trigger to log subscription changes
CREATE TRIGGER TRG_SUB_HISTORY
AFTER UPDATE ON SUBSCRIPTIONS
REFERENCING NEW AS N OLD AS O
FOR EACH ROW
MODE DB2SQL
WHEN (N.STATUS <> O.STATUS OR N.PLAN_CODE <> O.PLAN_CODE)
BEGIN ATOMIC
    INSERT INTO SUBSCRIPTION_HISTORY 
        (SUBSCRIPTION_ID, CUSTOMER_ID, PLAN_CODE, ACTION, OLD_VALUE, NEW_VALUE, CHANGED_BY)
    VALUES
        (N.SUBSCRIPTION_ID, N.CUSTOMER_ID, N.PLAN_CODE, 'STATUS_CHANGE',
         O.STATUS, N.STATUS, USER);
END;

-- ================================================================
-- SECURITY GRANTS (adjust based on your security model)
-- ================================================================

-- GRANT SELECT, INSERT, UPDATE ON CUSTOMERS TO ROLE PAYWALL_APP;
-- GRANT SELECT, INSERT, UPDATE ON SUBSCRIPTIONS TO ROLE PAYWALL_APP;
-- GRANT SELECT, INSERT, UPDATE ON PAYMENT_METHODS TO ROLE PAYWALL_APP;
-- GRANT SELECT, INSERT ON PAYMENT_TRANSACTIONS TO ROLE PAYWALL_APP;
-- GRANT SELECT, INSERT, DELETE ON ACTIVATION_KEYS TO ROLE PAYWALL_APP;
-- GRANT SELECT ON PLAN_DEFINITIONS TO ROLE PAYWALL_APP;
-- GRANT EXECUTE ON PROCEDURE CLEANUP_ACTIVATION_KEYS TO ROLE PAYWALL_BATCH;
-- GRANT EXECUTE ON PROCEDURE LOCK_CUSTOMER_ACCOUNT TO ROLE PAYWALL_APP;